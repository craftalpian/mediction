type PatientPayload = 
 record {
   address: text;
   birthdate: text;
   bloodType: text;
   fullname: text;
   gender: PatientGender;
   idNumber: nat;
   insurance: bool;
   password: text;
   phoneNumber: text;
   representativeAddress: text;
   representativeName: text;
   representativePhoneNumber: text;
   representativeStatus: text;
 };
type PatientId__1 = nat;
type PatientId = nat;
type PatientGender = 
 variant {
   Female;
   Male;
 };
type Patient = 
 record {
   address: text;
   birthdate: text;
   bloodType: text;
   createdAt: int;
   fullname: text;
   gender: PatientGender;
   id: nat;
   idNumber: nat;
   insurance: bool;
   owner: principal;
   password: text;
   phoneNumber: text;
   representativeAddress: text;
   representativeName: text;
   representativePhoneNumber: text;
   representativeStatus: text;
   updatedAt: int;
 };
type Medicine = 
 record {
   dosage: Dosage;
   drinkDuration: DrinkDuration;
   drinkPeriod: DrinkPeriod;
   drinkRules: DrinkRules;
   drinkStart: text;
   name: text;
 };
type HospitalPayload = 
 record {
   address: text;
   category: HospitalCategory;
   email: text;
   name: text;
   password: text;
   personInCharge: text;
   personInChargePhone: text;
   personInPosition: text;
   phone: text;
 };
type HospitalId = nat;
type HospitalCategory = 
 variant {
   Private;
   Public;
 };
type Hospital = 
 record {
   address: text;
   category: HospitalCategory;
   createdAt: int;
   email: text;
   id: nat;
   name: text;
   owner: principal;
   password: text;
   personInCharge: text;
   personInChargePhone: text;
   personInPosition: text;
   phone: text;
   updatedAt: int;
 };
type HistoryPayload = 
 record {
   action: HistoryAction;
   description: text;
   diagnoses: text;
   doctorId: DoctorId__1;
   followUp: text;
   medicines: vec Medicine;
   symptoms: text;
   tension: text;
   weight: nat;
 };
type HistoryId = nat;
type HistoryAction = 
 variant {
   CheckUp;
   Operasi;
   Terapi;
 };
type History = 
 record {
   action: HistoryAction;
   createdAt: int;
   description: text;
   diagnoses: text;
   doctorId: DoctorId__1;
   followUp: text;
   id: HistoryId;
   medicines: vec Medicine;
   owner: principal;
   patientId: PatientId__1;
   symptoms: text;
   tension: text;
   updatedAt: int;
   weight: nat;
 };
type DrinkRules = 
 variant {
   SebelumMakan;
   SebelumTidur;
   SesudahMakan;
 };
type DrinkPeriod = 
 variant {
   DuaHariSekali;
   HariPilihan: text;
   Lainnya: text;
   SetiapHari;
   TigaHariSekali;
 };
type DrinkDuration = 
 variant {
   DuaMinggu;
   Lainnya: text;
   SatuBulan;
   SatuHari;
   SatuMinggu;
   TigaHari;
 };
type Dosage = 
 variant {
   Five;
   Four;
   One;
   Three;
   Two;
 };
type DoctorSpecialist = 
 variant {
   Dermatolog;
   Kardiolog;
   Neurolog;
   Onkolog;
   Ortopedi;
 };
type DoctorSector = 
 variant {
   Anak;
   Bedah;
   Gigi;
   Psikiatri;
   Umum;
 };
type DoctorPayload = 
 record {
   email: text;
   fullname: text;
   numberSIP: text;
   phone: text;
   sector: DoctorSector;
   specialist: DoctorSpecialist;
 };
type DoctorId__1 = nat;
type DoctorId = nat;
type Doctor = 
 record {
   createdAt: int;
   email: text;
   fullname: text;
   id: nat;
   numberSIP: text;
   owner: principal;
   phone: text;
   sector: DoctorSector;
   specialist: DoctorSpecialist;
   updatedAt: int;
 };
service : {
  createDoctor: (DoctorId, DoctorPayload) -> (Doctor);
  createDoctorPatient: (DoctorId, PatientId) -> (vec PatientId);
  createHistory: (PatientId, HistoryPayload) -> (vec History);
  createHospital: (HospitalId, HospitalPayload) -> (Hospital);
  createHospitalPatient: (HospitalId, PatientId) -> (vec PatientId);
  createPatient: (PatientId, PatientPayload) -> (Patient);
  getDoctor: (DoctorId) -> (opt Doctor);
  getDoctorPatient: (DoctorId) -> (vec Patient);
  getHistory: (PatientId) -> (vec History);
  getHospital: (HospitalId) -> (opt Hospital);
  getHospitalPatient: (HospitalId) -> (vec Patient);
  getPatient: (PatientId) -> (opt Patient);
  removeDoctorPatient: (DoctorId, PatientId) -> (vec PatientId);
}
